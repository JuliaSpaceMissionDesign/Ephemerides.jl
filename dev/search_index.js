var documenterSearchIndex = {"docs":
[{"location":"api/#ephemerides_api","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Ephemerides]\nOrder = [:type]","category":"page"},{"location":"api/#Ephemerides.AbstractEphemRecord","page":"API","title":"Ephemerides.AbstractEphemRecord","text":"AbstractEphemRecord\n\nAbstract type for ephemeris segment records.\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.AbstractSPKCache","page":"API","title":"Ephemerides.AbstractSPKCache","text":"AbstractSPKCache\n\nAbstract type for all SPK segment type caches.\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.AbstractSPKHeader","page":"API","title":"Ephemerides.AbstractSPKHeader","text":"AbstractSPKHeader\n\nAbstract type for all SPK segment type headers. \n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.AbstractSPKSegment","page":"API","title":"Ephemerides.AbstractSPKSegment","text":"AbstractSPKSegment\n\nAbstract type for all SPK segment types.\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.DAF","page":"API","title":"Ephemerides.DAF","text":"DAF\n\nContainer to hold the information of NAIF's Double precision Array File (DAF). \n\nFields\n\nfilepath – String system filepath of the DAF \narray – Vector{UInt8} binary content of the DAF\nheader – DAFHeader file record of the DAF\ncomment – String text within the DAF comment area \nftype – Int file type, equals 1 for SPK and 2 for PCK\ndesc – DAF PCK/SPK segment descriptors\nseglist – SPKSegmentList list of the SPK/PCK segments within the DAF\n\nReferences\n\nDAF Required Reading\n\nSee Also\n\nSee also DAFHeader, SPKSegmentList and EphemerisProvider\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.DAF-Tuple{String}","page":"API","title":"Ephemerides.DAF","text":"DAF(filename::String)\n\nParse a DAF file and retrieve its content. \n\nnote: Note\nThis function does not initialise the segment types. That operation can be done in a  second moment through the initialise_segments! function.\n\nwarning: Warning\nOnly DAF files with identification word equal to \"DAF/SPK\" or \"DAF/PCK\" are  accepted, otherwise an error is thrown.\n\nSee Also\n\nSee also initialise_segments!.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.DAFHeader","page":"API","title":"Ephemerides.DAFHeader","text":"DAFHeader\n\nThe DAF header, or file record, is the first physical record in a DAF and stores general  information about the content of the file. \n\nFields\n\nnd – Int32 number of double components in each array summary\nni – Int32 number of integer components in each array summary\nfwd – Int32 record number of initial summary record\nbwd – Int32 record number of final summary record\nffa – Int32 first free address of the file \nname – String internal name of the file\nlend – Bool true if the file was generated in little endian \n\nReferences\n\nDAF Required Reading\n\nSee Also\n\nSee also DAF and EphemerisProvider\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.DAFHeader-Tuple{Vector{UInt8}}","page":"API","title":"Ephemerides.DAFHeader","text":"DAFHeader(record::Vector{UInt8})\n\nParse the header (file record) of the DAF file, i.e., the first physical record in a DAF  which contains global information about the file.\n\nReferences\n\nDAF Required Reading\n\nSee Also\n\nSee also DAF, parse_daf_comment and parse_daf_summaries\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.DAFSegmentDescriptor","page":"API","title":"Ephemerides.DAFSegmentDescriptor","text":"DAFSegmentDescriptor\n\nA container object to store both SPK and PCK descriptors information.\n\nFields\n\nsegtype – Int32 SPK/PCK segment type\ntstart – Float64 initial segment type, in TDB seconds since J2000.0\ntend – Float64 final segment type, in TDB seconds since J2000.0\ntid – Int32 target object NAIF ID\ncid – Int32 center object NAIF ID\naxesid – Int32 reference axes ID. Defaults to -1 for PCKs\niaa – Int32 initial array address\nfaa – Int32 final array address\n\nReferences\n\nSPK Required Reading\nPCK Required Reading\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.DAFSegmentDescriptor-Tuple{Vector{UInt8}, Ephemerides.DAFHeader, Bool}","page":"API","title":"Ephemerides.DAFSegmentDescriptor","text":"DAFSegmentDescriptor(summary::Vector{UInt8}, head::DAFHeader, isspk::Bool)\n\nGenerate an SPK or PCK descriptor by parsing a DAF summary.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.EphemRecordPCK","page":"API","title":"Ephemerides.EphemRecordPCK","text":"EphemRecordPCK <: AbstractEphemRecord\n\nStore the PCK metadata relative to a given (target, center) axes pair.\n\nFields\n\ntarget – Int target axes NAIF ID\ncenter – Int center axes NAIF ID\nt_start – start times of each sub-window, in TDB seconds since J2000\nt_end – final times of each sub-window, in TDB seconds since J2000\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.EphemRecordSPK","page":"API","title":"Ephemerides.EphemRecordSPK","text":"EphemRecordSPK <: AbstractEphemRecord\n\nStore the SPK metadata relative to a given (target, center) objects pair.\n\nFields\n\ntarget – Int target object NAIF ID\ncenter – Int center object NAIF ID\naxes – Int reference axes ID \nt_start – start times of each sub-window, in TDB seconds since J2000\nt_end – final times of each sub-window, in TDB seconds since J2000\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.EphemerisProvider","page":"API","title":"Ephemerides.EphemerisProvider","text":"EphemerisProvider(file::String)\nEphemerisProvider(files::Vector{String})\n\nCreate an EphemerisProvider instance by loading a single or multiple binary ephemeris  kernel files specified by files. Currently, only NAIF Double precision Array File (DAF) kernels (i.e., SPK and PCK) are accepted.\n\nExample\n\njulia> eph = EphemerisProvider(\"PATH_TO_KERNEL\")\nEphemerisProvider([...])\n\njulia> eph = EphemerisProvider([\"PATH_TO_KERNEL_1\", \"PATH_TO_KERNEL_2\"])\nEphemerisProvider([])\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKLink","page":"API","title":"Ephemerides.SPKLink","text":"SPKLink\n\nA link object to create a mapping between DAFSegmentDescriptor and its actual  location within an EphemerisProvider object. \n\nFields\n\ndesc – DAFSegmentDescriptor for the segment associated to this link\nfid – Int index of the DAF containg the link data.\nlid – Int field number in the SPKSegmentList for this segment type.\neid – Int index of the inner segment list that stores this SPK segment.\nfct – Int 1 or -1 depending on whether the (from, to) directions must be reversed.\n\nSee Also\n\nSee also SPKLinkTable, SPKSegmentList and add_spklinks!.\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKLinkTable","page":"API","title":"Ephemerides.SPKLinkTable","text":"SPKLinkTable\n\nDictionary object providing all the SPKLink available between a set of (from, to) objects\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentCache1","page":"API","title":"Ephemerides.SPKSegmentCache1","text":"SPKSegmentCache1 <: AbstractSPKCache\n\nCache instance for SPK segments of type 1 and 21. The fields contained within this cache  are taken from the FORTRAN NAIF's SPICE implementation for type 1 SPK segments. \n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentCache1-Tuple{Ephemerides.SPKSegmentHeader1}","page":"API","title":"Ephemerides.SPKSegmentCache1","text":"SPKSegmentCache1()\n\nInitialise the cache for an SPK segment of type 1.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentCache2","page":"API","title":"Ephemerides.SPKSegmentCache2","text":"SPKSegmentCache2 <: AbstractSPKCache\n\nCache instance for SPK segments of type 2 and 3.\n\nFields\n\nA – Chebyshev's polynomial coefficients, with size (ncomp, order)\nx1 – Values of the Chebyshev's polynomials\nx2 – Derivatives of the Chebyshev's polynomials\nid – Index of the currently loaded logical record\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentCache2-Tuple{Ephemerides.SPKSegmentHeader2}","page":"API","title":"Ephemerides.SPKSegmentCache2","text":"SPKSegmentCache2(spkhead::SPKSegmentHeader2)\n\nInitialise the cache for an SPK segment of type 2 and 3.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentCache8","page":"API","title":"Ephemerides.SPKSegmentCache8","text":"SPKSegmentCache8 <: AbstractSPKCache\n\nCache instance for SPK segments of type 8.\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentCache8-Tuple{Ephemerides.SPKSegmentHeader8}","page":"API","title":"Ephemerides.SPKSegmentCache8","text":"SPKSegmentCache8(spkhead::SPKSegmentHeader2)\n\nInitialise the cache for an SPK segment of type 8.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentHeader1","page":"API","title":"Ephemerides.SPKSegmentHeader1","text":"SPKSegmentHeader1 <: AbstractSPKHeader\n\nHeader instance for SPK segments of type 1 and 21.\n\nFields\n\nn – Int number of records in the segment \nndirs – Int number of directory epochs\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentHeader1-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentHeader1","text":"SPKSegmentHeader1(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the segment header for an SPK segment of type 1.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentHeader2","page":"API","title":"Ephemerides.SPKSegmentHeader2","text":"SPKSegmentHeader2 <: AbstractSPKHeader\n\nHeader instance for SPK segments of type 2 and 3.\n\nFields\n\ntstart – Float64 initial epoch of the first record, in seconds since J2000\ntlen – Float64 interval length covered by each record, in seconds\norder – Int polynomial order \nn – Int number of records in the segment\nrecsize – Int byte size of each logical record\nncomp – Int number of vector components\nscale – Float64 scale factor for the Chebyshev derivatives\niaa – Int initial segment file address\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentHeader2-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentHeader2","text":"SPKSegmentHeader2(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the segment header for an SPK segment of type 2 and 3.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentHeader8","page":"API","title":"Ephemerides.SPKSegmentHeader8","text":"SPKSegmentHeader8 <: AbstractSPKHeader\n\nHeader instance for SPK segments of type 8.\n\nFields\n\ntstart – Float64 segment starting epoch, in TDB seconds since J2000 \ntlen – Float64 interval length, in seconds\norder – Int interpolating polynomial degree\nN – Int group size (order + 1)\nn – Int number of states in the segment\niaa - Int initial segment file address \niseven – Bool true for even group size\ntype – Int SPK type\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentHeader8-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentHeader8","text":"SPKSegmentHeader8(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the segment header for an SPK segment of type 8.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentList","page":"API","title":"Ephemerides.SPKSegmentList","text":"SPKSegmentList\n\nA container object to efficiently store all the different SPK segments that are contained  within a single DAF file.\n\n\n\nSPKSegmentList()\n\nInitialises an empty SPKSegmentList object.\n\nSee also\n\nSee also add_segment!\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentType1","page":"API","title":"Ephemerides.SPKSegmentType1","text":"SPKSegmentType1 <: AbstractSPKSegment\n\nSegment instance for SPK segments of type 1 and 21, which contain Modified Difference Arrays  (MDA). This data type is normally used for spacecraft whose ephemerides are produced by JPL's  principal trajectory integrator DPTRAJ. \n\nFields\n\nhead – Segment header \ncache – Segment cache \n\nReferences\n\nSPK Required Reading\nSPICE Toolkit\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentType1-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentType1","text":"SPKSegmentType1(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the object representing an SPK segment of type 1.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentType12","page":"API","title":"Ephemerides.SPKSegmentType12","text":"SPKSegmentType12 <: AbstractSPKSegment\n\nSegment instance for SPK segments of type 12.\n\nFields\n\nhead – Segment header \ncache – Segment cache \n\nReferences\n\nSPK Required Reading\nSPICE Toolkit\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentType12-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentType12","text":"SPKSegmentType12(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the object representing an SPK segment of type 12.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentType2","page":"API","title":"Ephemerides.SPKSegmentType2","text":"SPKSegmentType2 <: AbstractSPKSegment\n\nSegment instance for SPK segments of type 2, which contain Chebyshev polynomial coefficients  for the position and/or state of the body as function of time. This data type is normally  used for planet barycenters, and for satellites whose ephemerides are integrated.\n\nFields\n\nhead – Segment header \ncache – Segment cache \n\nReferences\n\nSPK Required Reading\nSPICE Toolkit\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentType2-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentType2","text":"SPKSegmentType2(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the object representing an SPK segment of type 2.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentType3","page":"API","title":"Ephemerides.SPKSegmentType3","text":"SPKSegmentType3 <: AbstractSPKSegment\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentType3-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentType3","text":"SPKSegmentType3(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the object representing an SPK segment of type 3.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.SPKSegmentType8","page":"API","title":"Ephemerides.SPKSegmentType8","text":"SPKSegmentType8 <: AbstractSPKSegment\n\nSegment instance for SPK segments of type 8.\n\nFields\n\nhead – Segment header \ncache – Segment cache \n\nReferences\n\nSPK Required Reading\nSPICE Toolkit\n\n\n\n\n\n","category":"type"},{"location":"api/#Ephemerides.SPKSegmentType8-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.SPKSegmentType8","text":"SPKSegmentType8(daf::DAF, desc::DAFSegmentDescriptor)\n\nCreate the object representing an SPK segment of type 8.\n\n\n\n\n\n","category":"method"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Ephemerides]\nOrder = [:function]","category":"page"},{"location":"api/#Ephemerides.add_segment!-Tuple{Ephemerides.SPKSegmentList, Ephemerides.AbstractSPKSegment}","page":"API","title":"Ephemerides.add_segment!","text":"add_segment!(list::SPKSegmentList, spk::AbstractSPKSegment)\n\nAdd the SPK segment to the proper vector within the given SPKSegmentList list \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.add_spklinks!-Tuple{Dict{Int64, Dict{Int64, Vector{Ephemerides.SPKLink}}}, Ephemerides.DAF, Int64}","page":"API","title":"Ephemerides.add_spklinks!","text":"add_spklinks!(table::SPKLinkTable, daf::DAF, fid::Int)\n\nInsert in the input SPKLinkTable all the SPK or PCK links associated to  the segment descriptors of the input DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.analyse_timespan-Tuple{Vector{<:Ephemerides.AbstractEphemRecord}}","page":"API","title":"Ephemerides.analyse_timespan","text":"analyse_timespan(records)\n\nAnalyse a set of AbstractEphemRecord, returning the minimum and maximum covered  times, in TDB seconds since J2000, together with a continuity parameter.\n\nReferences\n\nCALCEPH C++ library\n\nSee Also\n\nSee also ephem_spk_timespan and ephem_pck_timespan.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.array-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.array","text":"get_array(daf::DAF)\n\nReturn the byte content of the DAF file.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.axes-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.axes","text":"axes(desc::DAFSegmentDescriptor)\n\nReturn the NAIF integer code for the reference axes. It is valid only for SPK files and  defaults to -1 for PCKs. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.cache-Tuple{T} where T<:Ephemerides.AbstractSPKSegment","page":"API","title":"Ephemerides.cache","text":"cache(spk::AbstractSPKSegment)\n\nReturn the segment cache data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.center-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.center","text":"center(desc::DAFSegmentDescriptor)\n\nReturn the NAIF integer code for the reference object or axes for SPK and PCK, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.chebyshev!-Tuple{Ephemerides.SPKSegmentCache2, Number, Int64}","page":"API","title":"Ephemerides.chebyshev!","text":"chebyshev!(cache::SPKSegmentCache2, t::Number, order::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.comment-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.comment","text":"get_comment(daf::DAF)\n\nReturn the comment written in the DAF comment section. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.compute_mda_position-Tuple{Ephemerides.SPKSegmentCache1, Number}","page":"API","title":"Ephemerides.compute_mda_position","text":"compute_mda_position(cache::SPKSegmentCache1, Δ::Number)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.compute_mda_velocity-Tuple{Ephemerides.SPKSegmentCache1, Number}","page":"API","title":"Ephemerides.compute_mda_velocity","text":"compute_mda_velocity(cache::SPKSegmentCache1, Δ::Number)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.create_linktables-Tuple{Vector{Ephemerides.DAF}}","page":"API","title":"Ephemerides.create_linktables","text":"create_linktables(dafs::Vector{DAF})\n\nCreate the SPK and PCK SPKLinkTable for all the segments stores in the input DAFs.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.create_spk_segment-Tuple{Ephemerides.DAF, Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.create_spk_segment","text":"create_spk_segment(daf::DAF, desc::DAFSegmentDescriptor)\n\nInitialise an SPK segment according to the segment type defined in the  DAFSegmentDescriptor desc.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.descriptor-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.descriptor","text":"descriptor(link::SPKLink)\n\nReturn the SPK/PCK segment descriptor associated to this link.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.descriptors-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.descriptors","text":"get_descriptors(daf::DAF)\n\nReturn the SPK/PCK segment descriptors contained in the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.element_id-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.element_id","text":"element_id(link::SPKLink)\n\nReturn the segment index in the inner SPK/PCK segment list.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.endian-Tuple{Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.endian","text":"endian(head::DAFHeader)\n\nReturn true if the DAF file is in little-endian.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.endian-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.endian","text":"endian(daf::DAF)\n\nReturn true if the DAF is in little-endian.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_get_axes-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.ephem_get_axes","text":"ephem_get_axes(eph::EphemerisProvider)\n\nReturn a list of Frame IDs representing axes with available orientation data. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_get_points-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.ephem_get_points","text":"ephem_get_points(eph::EphemerisProvider)\n\nReturn a list of NAIFIds representing bodies with available ephemeris data. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_pck_records-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.ephem_pck_records","text":"ephem_pck_records(eph::EphemerisProvider)\n\nReturn a list of EphemRecordPCK storing metadata relative to each (target, center) axes pairs in the loaded PCK kernels. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_pck_timespan-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.ephem_pck_timespan","text":"ephem_pck_timespan(eph::EphemerisProvider)\n\nReturn the minimum and maximum time available in the PCK kernels loaded within eph, in  TDB seconds since J2000, together with a continuity parameter defined as follows: \n\n0 no PCK data is available.\n1 the quantities of all axes are available for any time between the first and last time.\n2 the quantities of some axes are available on discontinuous time intervals between the    first and last time.\n3 the quantities of each axis are available on a continuous time interval between the first    and the last time, but not available for any time between the first and last time.\n\nReferences\n\nCALCEPH C++ library\n\nSee Also\n\nSee also ephem_spk_timespan.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_rotation12-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_rotation12","text":"ephem_rotation12(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 12-elements orientation angles of one set of axes (to) relative  to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance  with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_rotation3-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_rotation3","text":"ephem_rotation3(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 3-elements orientation angles of one set of axes (to) relative  to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance  with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_rotation6-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_rotation6","text":"ephem_rotation6(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 6-elements orientation angles of one set of axes (to) relative  to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance  with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_rotation9-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_rotation9","text":"ephem_rotation9(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 9-elements orientation angles of one set of axes (to) relative  to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance  with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_spk_records-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.ephem_spk_records","text":"ephem_spk_records(eph::EphemerisProvider)\n\nReturn a list of EphemRecordSPK storing metadata relative to each (target, center) object pairs in the loaded SPK kernels. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_spk_timespan-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.ephem_spk_timespan","text":"ephem_spk_timespan(eph::EphemerisProvider)\n\nReturn the minimum and maximum time available in the SPK kernels loaded within eph, in  TDB seconds since J2000, together with a continuity parameter defined as follows: \n\n0 no SPK data is available.\n1 the quantities of all bodies are available for any time between the first and last time.\n2 the quantities of some bodies are available on discontinuous time intervals between the    first and last time.\n3 the quantities of each body are available on a continuous time interval between the first    and the last time, but not available for any time between the first and last time.\n\nReferences\n\nCALCEPH C++ library\n\nSee Also\n\nSee also ephem_pck_timespan.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_timescale_id-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.ephem_timescale_id","text":"ephem_timescale_id(eph::EphemerisProvider)\n\nRetrieve a timescale ID associated with the ephemeris handler eph.  It returns 1 for Barycentric Dynamical Time (TDB) and 2 for Barycentric Coordinate Time (TCB).\n\nwarning: Warning\nEphemeris providers with mixed timescales are not supported. An error is thrown if in  the ephemeris handler some segments are defined in TDB and some other segments in TCB.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_vector12-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_vector12","text":"ephem_vector12(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 12-elements state of one body (to) relative to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_vector3-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_vector3","text":"ephem_vector3(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 3-elements state of one body (to) relative to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_vector6-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_vector6","text":"ephem_vector6(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 6-elements state of one body (to) relative to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.ephem_vector9-Tuple{EphemerisProvider, Int64, Int64, Number}","page":"API","title":"Ephemerides.ephem_vector9","text":"ephem_vector9(eph::EphemerisProvider, from::Int, to::Int, time::Number)\n\nCompute the 9-elements state of one body (to) relative to another (from) at time, expressed in TDB/TCB seconds since J2000, in accordance with the kernel timescale.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.factor-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.factor","text":"factor(link::SPKLink)\n\nReturn the direction multiplicative factor.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.file_id-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.file_id","text":"file_id(link::SPKLink)\n\nReturn the DAF file index.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.filename-Tuple{Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.filename","text":"filename(head::DAFHeader)\n\nReturn the internal description of the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.filepath-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.filepath","text":"filepath(daf::DAF)\n\nReturn the system path of the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.final_address-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.final_address","text":"final_address(desc::DAFSegmentDescriptor)\n\nReturn the final address of the segment array in teh DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.final_record-Tuple{Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.final_record","text":"final_record(head::DAFHeader)\n\nReturn the record number of the final summary record in the DAF \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.final_record-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.final_record","text":"final_record(daf::DAF)\n\nReturn the record number of the final summary record in the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.final_time-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.final_time","text":"final_time(desc::DAFSegmentDescriptor)\n\nReturn the final epoch of the interval for which ephemeris data are contained in the  segment, in seconds since J2000.0\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.final_time-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.final_time","text":"final_time(link::SPKLink)\n\nReturn the final epoch of the interval for which ephemeris data are contained in the  segment associated to this link, in seconds since J2000.0\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.final_times-Tuple{T} where T<:Ephemerides.AbstractEphemRecord","page":"API","title":"Ephemerides.final_times","text":"final_times(record::AbstractEphemRecord)\n\nRecover the final times of each sub-window in which the ephemeris data of record is  defined, expressed in TDB seconds since J2000\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.find_logical_record-Tuple{Ephemerides.DAF, Ephemerides.SPKSegmentHeader1, Number}","page":"API","title":"Ephemerides.find_logical_record","text":"find_logical_record(daf::DAF, head::SPKSegmentHeader1, time::Number)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.find_logical_record-Tuple{Ephemerides.SPKSegmentHeader2, Number}","page":"API","title":"Ephemerides.find_logical_record","text":"find_logical_record(head::SPKSegmentHeader2, time::Number)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.find_logical_record-Tuple{Ephemerides.SPKSegmentHeader8, Number}","page":"API","title":"Ephemerides.find_logical_record","text":"find_logical_record(head::SPKSegmentHeader8, time::Number)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.free_address-Tuple{Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.free_address","text":"free_address(head::DAFHeader)\n\nReturn the first free address in the file, i.e., the address at which the first element of  the next array is to be added.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.free_address-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.free_address","text":"free_address(daf::DAF)\n\nReturn the first free address in the file, i.e., the address at which the first element of  the next array is to be added.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_coefficients!-Tuple{Ephemerides.DAF, Ephemerides.SPKSegmentHeader1, Ephemerides.SPKSegmentCache1, Int64}","page":"API","title":"Ephemerides.get_coefficients!","text":"get_coefficients!(daf::DAF, head::SPKSegmentHeader1, cache::SPKSegmentCache1, index::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_coefficients!-Tuple{Ephemerides.DAF, Ephemerides.SPKSegmentHeader2, Ephemerides.SPKSegmentCache2, Int64}","page":"API","title":"Ephemerides.get_coefficients!","text":"get_coefficients!(daf::DAF, head, cache, index::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_coefficients!-Tuple{Ephemerides.DAF, Ephemerides.SPKSegmentHeader8, Ephemerides.SPKSegmentCache8, Int64}","page":"API","title":"Ephemerides.get_coefficients!","text":"get_coefficients!(daf::DAF, head, cache, index::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_daf-Tuple{EphemerisProvider, Int64}","page":"API","title":"Ephemerides.get_daf","text":"daf(eph::EphemerisProvider, id::Int)\n\nReturn the DAF file in the ephemeris provider at index id.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_daf-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.get_daf","text":"daf(eph::EphemerisProvider)\n\nReturn the DAF files stored in the ephemeris provider. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_record-Tuple{Any, Integer}","page":"API","title":"Ephemerides.get_record","text":"get_record(array::Vector{UInt8}, index::Integer)\n\nRetrieve a whole DAF record at position index.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_segment-Tuple{Ephemerides.SPKSegmentList, Int64, Int64}","page":"API","title":"Ephemerides.get_segment","text":"get_segment(list::SPKSegmentList, lid::Int, eid::Int)\n\nReturn the segment contained in the lid list at index eid.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.get_segment_boundaries-Tuple{Vector{Ephemerides.DAFSegmentDescriptor}}","page":"API","title":"Ephemerides.get_segment_boundaries","text":"get_segment_boundaries(desclist::Vector{DAFSegmentDescriptor})\n\nParse all the segment descriptors of a given (center, target) pair and return a set of  initial and final times, in TDB seconds since J2000, representing all the time  sub-windows in which the ephemeris data for this pair is defined. \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.header-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.header","text":"get_header(daf::DAF)\n\nReturn the DAFHeader header of the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.header-Tuple{T} where T<:Ephemerides.AbstractSPKSegment","page":"API","title":"Ephemerides.header","text":"header(spk::AbstractSPKSegment)\n\nReturn the segment header.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.initial_address-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.initial_address","text":"initial_address(desc::DAFSegmentDescriptor)\n\nReturn the initial address of the segment array in the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.initial_record-Tuple{Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.initial_record","text":"initial_record(head::DAFHeader)\n\nReturn the record number of the initial summary record in the DAF \n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.initial_record-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.initial_record","text":"initial_record(daf::DAF)\n\nReturn the record number of the initial summary record in the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.initial_time-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.initial_time","text":"initial_time(desc::DAFSegmentDescriptor)\n\nReturn the initial epoch of the interval for which ephemeris data are contained in the  segment, in seconds since J2000.0\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.initial_time-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.initial_time","text":"initial_time(link::SPKLink)\n\nReturn the initial epoch of the interval for which ephemeris data are contained in the  segment associated to this link, in seconds since J2000.0\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.initial_times-Tuple{T} where T<:Ephemerides.AbstractEphemRecord","page":"API","title":"Ephemerides.initial_times","text":"initial_times(record::AbstractEphemRecord)\n\nRecover the initial times of each sub-window in which the ephemeris data of record is  defined, expressed in TDB seconds since J2000\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.initialise_segments!-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.initialise_segments!","text":"initialise_segments!(daf::DAF)\n\nFill the SPKSegmentList by initialising the SPK/PCK segments associated to all  the descriptors stores within the DAF.\n\nSee Also\n\nSee also DAF and create_spk_segment\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.interpol-Union{Tuple{T}, Tuple{Ephemerides.SPKSegmentCache2, AbstractVector{T}, Int64, Number, Int64}} where T","page":"API","title":"Ephemerides.interpol","text":"interpol(cache::SPKSegmentCache2, cheb, order::Int, scale::Number, offset::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.is_little_endian-Tuple{Vector{UInt8}}","page":"API","title":"Ephemerides.is_little_endian","text":"is_little_endian(array::Vector{UInt8})\n\nReturn true if the array corresponds to the string indicating a little-endian format.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.is_pck-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.is_pck","text":"is_pck(daf::DAF)\n\nReturn true if the DAF stores PCK data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.is_spk-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.is_spk","text":"is_spk(daf::DAF)\n\nReturn true if the DAF stores SPK data.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.list_id-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.list_id","text":"list_id(link::SPKLink)\n\nReturn the index of the list containing the segments of the given SPK/PCK type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.parse_daf_comment-Tuple{Vector{UInt8}, Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.parse_daf_comment","text":"parse_daf_comment(array::Vector{UInt8}, header::DAFHeader)\n\nRetrieve the comment section of a binary DAF.\n\nReferences\n\nDAF Required Reading\n\nSee Also\n\nSee also DAF, DAFHeader and parse_daf_summaries\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.parse_daf_summaries-Tuple{Vector{UInt8}, Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.parse_daf_summaries","text":"parse_daf_summaries(array::Vector{UInt8}, head::DAFHeader)\n\nParse the DAF binary content and retrieve all the summary records.\n\nReferences\n\nDAF Required Reading\n\nSee Also\n\nSee also DAF, DAFHeader and parse_daf_comment\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.parse_pck_segment_descriptor-Tuple{Vector{UInt8}, Bool}","page":"API","title":"Ephemerides.parse_pck_segment_descriptor","text":"parse_pck_segment_descriptor(summary::Vector{UInt8}, lend::Bool)\n\nCreate a DAFSegmentDescriptor object by parsing a binary PCK segment descriptor.  A default value of -1 is used to fill the reference frame field. The target and center fields are used for the actual target and center axes.\n\nReferences\n\nPCK Required Reading\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.parse_spk_segment_descriptor-Tuple{Vector{UInt8}, Bool}","page":"API","title":"Ephemerides.parse_spk_segment_descriptor","text":"parse_spk_segment_descriptor(summary::Vector{UInt8}, lend::Bool)\n\nCreate a DAFSegmentDescriptor object by parsing a binary SPK segment descriptor.\n\nReferences\n\nSPK Required Reading\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.pck_links-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.pck_links","text":"pck_links(eph::EphemerisProvider)\n\nReturn the SPKLinkTable for the PCK segments.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.reverse_link-Tuple{Ephemerides.SPKLink}","page":"API","title":"Ephemerides.reverse_link","text":"reverse_link(link::SPKLink)\n\nReverse the sign, i.e. change the sign of the multiplicative factor, of the link.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.segment_list-Tuple{Ephemerides.DAF}","page":"API","title":"Ephemerides.segment_list","text":"get_segment_list(daf::DAF)\n\nReturn the SPKSegmentList list of segments stored in the DAF.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.segment_type-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.segment_type","text":"segment_type(desc::DAFSegmentDescriptor)\n\nReturn the SPK/PCK segment type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.spk_field-Tuple{T} where T<:Ephemerides.AbstractSPKSegment","page":"API","title":"Ephemerides.spk_field","text":"spk_field(spk::AbstractSPKSegment)\n\nReturn the field number in the SPKSegmentList associated to the given SPK  segment type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.spk_links-Tuple{EphemerisProvider}","page":"API","title":"Ephemerides.spk_links","text":"spk_links(eph::EphemerisProvider)\n\nReturn the [SPKLinkTable] for the SPK segments.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.summary_size-Tuple{Ephemerides.DAFHeader}","page":"API","title":"Ephemerides.summary_size","text":"summary_size(head::DAFHeader)\n\nCompute the size of a single summary record of a DAF file, in bytes.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.target-Tuple{Ephemerides.DAFSegmentDescriptor}","page":"API","title":"Ephemerides.target","text":"target(desc::DAFSegmentDescriptor)\n\nReturn the NAIF integer code for the target object or axes for SPK and PCK, respectively.\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.∂chebyshev!-Tuple{Ephemerides.SPKSegmentCache2, Number, Int64}","page":"API","title":"Ephemerides.∂chebyshev!","text":"∂chebyshev!(cache::SPKSegmentCache2, t::Number, order::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.∂²chebyshev!-Tuple{Ephemerides.SPKSegmentCache2, Number, Int64}","page":"API","title":"Ephemerides.∂²chebyshev!","text":"∂²chebyshev!(cache::SPKSegmentCache2, t::Number, order::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#Ephemerides.∂³chebyshev!-Tuple{Ephemerides.SPKSegmentCache2, Number, Int64}","page":"API","title":"Ephemerides.∂³chebyshev!","text":"∂³chebyshev!(cache::SPKSegmentCache2, t::Number, order::Int)\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_available_axes-Tuple{EphemerisProvider}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_available_axes","text":"ephem_available_points(eph::EphemerisProvider)\n\nReturn a list of Frame IDs representing axes with available orientation data. \n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_available_points-Tuple{EphemerisProvider}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_available_points","text":"ephem_available_points(eph::EphemerisProvider)\n\nReturn a list of NAIFIds representing bodies with available ephemeris data. \n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_compute!-Tuple{Any, EphemerisProvider, Number, Number, Int64, Int64, Int64}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_compute!","text":"ephem_compute!(res, eph, jd0, time, target, center, order)\n\nInterpolate the position and/or its derivatives up to order for one body target relative  to another center at the time jd0 + time, expressed as a Julian Date. This function reads  the ephemeris files associated to eph and stores the results to res.\n\nThe returned array res must be large enough to store the results. The size of this array  must be equal to 3*order: \n\nres[1:3] contain the position (x, y, z) and is always valid \nres[4:6] contain the velocity (dx/dt, dy/dt, dz/dt) for order ≥ 1 \nres[7:9] contain the acceleration (d²x/dt², d²y/dt², d²z/dt²) for order ≥ 2\nres[10:12] contain the jerk (d³x/dt³, d³y/dt³, d³z/dt³) for order ≥ 3\n\nThe values stores in res are always returned in km, km/s, km/s², km/s³\n\nSee also\n\nSee also ephem_orient!\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_orient!-Tuple{Any, EphemerisProvider, Number, Number, Int64, Int64, Int64}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_orient!","text":"ephem_orient!(res, eph, jd0, time, target, center, order)\n\nInterpolate the orientation and its derivatives up to order for the target body at the  time jd0 + time, expressed as a Julian Date. This function reads the ephemeris files  associated to eph and stores the results to res.\n\nThe returned array res must be large enough to store the results. The size of this array  must be equal to 3*order: \n\nres[1:3] contain the angles \nres[4:6] contain the 1st derivative  for order ≥ 1 \nres[7:9] contain the 2nd derivative for order ≥ 2\nres[10:12] contain the 3rd derivative for order ≥ 3\n\nThe values stores in res are always returned in rad, rad/s, rad/s², rad/s³\n\nSee also\n\nSee also ephem_compute!\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_orient_records-Tuple{EphemerisProvider}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_orient_records","text":"ephem_orient_records(eph::EphemerisProvider)\n\nGet an array of jEph.EphemAxesRecord, providing detailed  informations on the orientation content of the ephemeris file.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_position_records-Tuple{EphemerisProvider}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_position_records","text":"ephem_position_records(eph::EphemerisProvider)\n\nGet an array of jEph.EphemPointRecord, providing detailed informations on the  position content of the ephemeris file.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_timescale-Tuple{EphemerisProvider}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_timescale","text":"ephem_timescale(eph::EphemerisProvider)\n\nRetrieve a timescale ID associated with the ephemeris handler eph.  It returns 1 for Barycentric Dynamical Time (TDB) and 2 for Barycentric Coordinate Time (TCB).\n\nwarning: Warning\nAn error is thrown if the timescale is neither TDB nor TCB.\n\n\n\n\n\n","category":"method"},{"location":"api/#JSMDInterfaces.Ephemeris.ephem_timespan-Tuple{EphemerisProvider}","page":"API","title":"JSMDInterfaces.Ephemeris.ephem_timespan","text":"ephem_timespan(eph::EphemerisProvider)\n\nReturns the first and last time available in the ephemeris file associated to  an ephemeris file. It returns a tuple containing:\n\nfirsttime – Julian date of the first time.\nlasttime – Julian date of the last time.\ncontinuous – Information about the availability of the quantities over the                  time span. It equals:\n1: if the quantities of all bodies are available for any time between    the first and last time.\n2: if the quantities of some bodies are available on discontinuous time    intervals between the first and last time.\n3: if the quantities of each body are available on a continuous time    interval between the first and last time, but not available for any    time between the first and last time.\n\n\n\n\n\n","category":"method"},{"location":"api/#Constants","page":"API","title":"Constants","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [Ephemerides]\nOrder = [:constant]","category":"page"},{"location":"api/#Ephemerides.DAF_RECORD_LENGTH","page":"API","title":"Ephemerides.DAF_RECORD_LENGTH","text":"DAF_RECORD_LENGTH\n\nDAF record length, in bytes.\n\nReferences\n\nDAF Required Reading\n\n\n\n\n\n","category":"constant"},{"location":"api/#Ephemerides.FTPSTR","page":"API","title":"Ephemerides.FTPSTR","text":"FTPSTR\n\nValidation string that guarantees the integrity of a DAF file. \n\nReferences\n\nDAF Required Reading\n\n\n\n\n\n","category":"constant"},{"location":"api/#Ephemerides.SPK_SEGMENTLIST_MAPPING","page":"API","title":"Ephemerides.SPK_SEGMENTLIST_MAPPING","text":"SPK_SEGMENT_MAPPING\n\nA dictionary mapping SPK segment types to the field index of the SPKSegmentList.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Ephemerides.TCB_SEGMENTS","page":"API","title":"Ephemerides.TCB_SEGMENTS","text":"TCB_SEGMENTS\n\nList of the SPK/PCK segment types for which the time argument is expressed in the TCB scale.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Ephemerides.TDB_SEGMENTS","page":"API","title":"Ephemerides.TDB_SEGMENTS","text":"TDB_SEGMENTS\n\nList of the SPK/PCK segment types for which the time argument is expressed in the TDB scale. \n\n\n\n\n\n","category":"constant"},{"location":"#Welcome-to-Ephemerides.jl!","page":"Home","title":"Welcome to Ephemerides.jl!","text":"","category":"section"}]
}
